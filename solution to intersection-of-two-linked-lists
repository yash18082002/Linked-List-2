// Time Complexity : worst case is O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// find the length of both the lists. move the pointer of the longer list by the difference. move forward in both lists until the intersection is found or return null

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null) {
            return null;
        }
        int lenA = 0;
        int lenB = 0;
        ListNode curr = headA;
        while(curr != null) {
            curr = curr.next;
            lenA++;
        }
        curr = headB;
        while(curr != null) {
            curr = curr.next;
            lenB++;
        }
        while(lenA > lenB) {
            headA = headA.next;
            lenA--;
        }
        while(lenA < lenB) {
            headB = headB.next;
            lenB--;
        }
        while(headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }
}
